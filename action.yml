name: install/cache apt packages

inputs:
  packages:  { required: true,  type: string }
  cache:     { required: false, type: string, default: yes }
  cache_gen: { required: false, type: string, default: v1 }

runs:
  using: composite
  steps:

    - id: apt
      name: apt package info
      shell: bash
      run: |
        case "${{ inputs.cache }}" in
          yes|workflow) cache="${{ inputs.cache }}" ;;
          *) cache= ;;
        esac
        gen="${{ inputs.cache_gen }}"
        packages="${{ inputs.packages }}"
        hash=$( (uname -mrsv; echo $gen $packages) | md5sum | awk '{print $1}' )
        [ "$cache" == 'workflow' ] && hash=$hash-${{ github.run_id }}
        cat << END
        ::set-output name=cache::$cache
        ::set-output name=archive::/tmp/apt-package.tz
        ::set-output name=hash::$hash
        END

    - id: cache
      if: steps.apt.outpts.cache != ''
      uses: actions/cache@v2
      with:
        path: ${{ steps.apt.outputs.archive }}
        key:  ${{ steps.apt.outputs.hash }}

    - name: extract apt archive
      if: steps.apt.outputs.cache != '' && steps.cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        archive="${{ steps.apt.outputs.archive }}"
        ls -l $archive
        [ -f $archive ] && sudo tar -C / -xvzf $archive

    - name: install packages
      if: steps.apt.outputs.cache == '' || steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        sudo apt-get install -y ${{ inputs.packages }}

    - name: archive installed package
      if: steps.apt.outputs.cache != '' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        packages="${{ inputs.packages }}"
        archive="${{ steps.apt.outputs.archive }}"
        list=/tmp/dpkg.out
        dpkg -L $packages | while read f; do [ -d "$f" ] || echo "$f"; done > $list
        tar -cvzf $archive -T $list
        ls -l $archive
